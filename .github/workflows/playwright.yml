name: business e2e 테스트

on:
  pull_request:
    branches:
      - main
      - dev

jobs:
  waiting_environment:
    name: 테스트 환경 미리 설치
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: 코드가져오기 checkout
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: pnpm 초기 설정
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: pnpm 디렉터리 확인
        id: pnpm-directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: pnpm 캐시 가져오기
        with:
          path: ${{ steps.pnpm-directory.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: dependency 설치
        run: pnpm install --frozen-lockfile

      - name: playwright 버전 확인
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(pnpm list | grep playwright/test)" >> $GITHUB_ENV

      - name: playwright 브라우저 캐시 확인
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: playwright 브라우저 설치
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright pnpx playwright@1.28.0 install --with-deps chromium

  playwright_e2e_test:
    needs: waiting_environment
    strategy:
      fail-fast: true
      matrix:
        command:
          - service_name: business
            dev_server: pnpm dev-biz &
            test: pnpm turbo --filter=gocho_business e2e:CICD
    name: ${{matrix.command.service_name}} 테스트
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

    steps:
      - uses: actions/checkout@v3
        name: 코드가져오기 checkout
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: pnpm 초기 설정
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: pnpm 디렉터리 확인
        id: pnpm-directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: pnpm 캐시 가져오기
        with:
          path: ${{ steps.pnpm-directory.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: dependency 설치
        run: pnpm install --frozen-lockfile

      - name: playwright 버전 확인
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(pnpm list | grep playwright/test)" >> $GITHUB_ENV

      - name: playwright 브라우저 캐시 확인
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: playwright 브라우저 설치
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright pnpx playwright@1.28.0 install --with-deps chromium

      - name: 개발 서버 실행
        run: ${{matrix.command.dev_server}}

      - name: playwright test 실행
        run: ${{matrix.command.test}}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 20

  result:
    needs: playwright_e2e_test
    name: 결과 슬랙으로 전송
    runs-on: ubuntu-latest
    steps:
      - name: 성공 시 테스트 결과 슬랙으로 전송
        if: ${{jobs.playwright_e2e_test.result==success}}
        run: echo"성공"
        # uses: rtCamp/action-slack-notify@master
        # env:
        #   SLACK_CHANNEL: 02-팀-frontend
        #   SLACK_FOOTER: ""
        #   SLACK_COLOR: "good"
        #   SLACK_MESSAGE: "dev 테스트 성공했습니다!:"
        #   SLACK_TITLE: "테스트코드 결과"
        #   SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: 실패 시 테스트 결과 슬랙으로 전송
        if: ${{jobs.playwright_e2e_test.result==failed}}
        # uses: rtCamp/action-slack-notify@master
        run: echo"실패"
        # env:
        #   SLACK_CHANNEL: 02-팀-frontend
        #   SLACK_FOOTER: ""
        #   SLACK_COLOR: "danger"
        #   SLACK_MESSAGE: "dev 테스트 실패했습니다!:"
        #   SLACK_TITLE: "테스트코드 결과"
        #   SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
