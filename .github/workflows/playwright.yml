name: Playwright Tests
on:
  pull_request:
    branches: [main, dev]
jobs:
  wait_url:
    name: vercel URL 대기
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    outputs:
      desktop_url: ${{ steps.waitForGochoDesktopURL.outputs.url }}
      mobile_url: ${{ steps.waitForGochoMobileURL.outputs.url }}
    steps:
      - name: 모바일 preview url 대기
        uses: patrickedqvist/wait-for-vercel-preview@v1.2.0
        id: waitForGochoMobileURL
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: "Preview – gocho-mobile"
          check_interval: 5
          max_timeout: 600
      - run: echo ${{steps.waitForGochoMobileURL.outputs.url}}

      - name: 데스크탑 preview url 대기
        uses: patrickedqvist/wait-for-vercel-preview@v1.2.0
        id: waitForGochoDesktopURL
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: "Preview – gocho-web"
          check_interval: 5
          max_timeout: 600
      - run: echo ${{steps.waitForGochoDesktopURL.outputs.url}}
  test_e2e:
    needs: wait_url
    name: playwright 테스트
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - name: pnpm 초기 설정
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: dependency 설치
        run: pnpm install --frozen-lockfile
      - name: playwright 브라우저 설치
        run: pnpm playwright install-deps chromium
      - name: playwright test 실행
        run: pnpm turbo e2e:web && pnpm turbo e2e:web
        env:
          GOCHO_WEB_URL: ${{ needs.wait_url.outputs.desktop_url }}
          GOCHO_MOBILE_URL: ${{ needs.wait_url.outputs.mobile_url }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 성공 시 테스트 결과 슬랙으로 전송
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: 01-팀-dev
          SLACK_FOOTER: ""
          SLACK_COLOR: "good"
          SLACK_MESSAGE: "dev 테스트 성공했습니다!:"
          SLACK_TITLE: "테스트코드 결과"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 실패 시 테스트 결과 슬랙으로 전송
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: 01-팀-dev
          SLACK_FOOTER: ""
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "dev 테스트 실패했습니다!:"
          SLACK_TITLE: "테스트코드 결과"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
